2020-12-25 00:42:52,543 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 00:43:01,372 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 00:43:07,488 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 00:43:08,790 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1276ms. Found 3 JPA repository interfaces.
2020-12-25 00:43:09,315 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 00:43:10,255 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 00:43:12,338 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 00:43:12,367 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 00:43:12,368 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 00:43:12,369 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 00:43:15,244 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 00:43:15,245 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 13776 ms
2020-12-25 00:43:15,554 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 00:43:15,555 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 00:43:15,588 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@3c3ab672
2020-12-25 00:43:16,251 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 00:43:16,625 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 00:43:16,917 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 00:43:17,564 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 00:43:18,611 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 00:43:19,583 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 00:43:20,327 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 00:43:20,376 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 00:43:22,091 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 00:43:22,203 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@45753c22, org.springframework.security.web.context.SecurityContextPersistenceFilter@3883031d, org.springframework.security.web.header.HeaderWriterFilter@3a9c92b5, org.springframework.web.filter.CorsFilter@7341baa3, org.springframework.security.web.authentication.logout.LogoutFilter@58f97013, com.ws.sep.seller.security.JwtAuthenticationFilter@b56d8a7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@391b01c5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@237cd264, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1ca0aa40, org.springframework.security.web.session.SessionManagementFilter@4d8522ff, org.springframework.security.web.access.ExceptionTranslationFilter@4cded2cd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4eacb6d1]
2020-12-25 00:43:23,414 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 00:43:23,418 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 00:43:23,723 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 00:43:23,724 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 00:43:24,656 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 00:43:24,657 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 00:43:27,574 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 00:43:27,589 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 00:43:27,770 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 00:43:28,397 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 00:43:28,569 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 00:43:28,805 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 00:43:30,008 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 00:43:30,009 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 00:43:30,009 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 00:43:30,010 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 00:43:30,010 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 00:43:30,011 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 00:43:30,011 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 00:43:30,655 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 00:43:30,659 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 00:43:30,663 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 00:43:30,672 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608853410669 with initial instances count: 0
2020-12-25 00:43:30,676 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 00:43:30,677 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608853410677, current=UP, previous=STARTING]
2020-12-25 00:43:30,682 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 00:43:30,693 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 00:43:30,809 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 00:43:31,002 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 00:43:31,003 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 00:43:32,214 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 00:43:33,450 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 00:43:33,476 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 44.79 seconds (JVM running for 47.554)
2020-12-25 00:44:00,661 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Disable delta property : false
2020-12-25 00:44:00,661 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Single vip registry refresh property : null
2020-12-25 00:44:00,661 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Force full registry fetch : false
2020-12-25 00:44:00,661 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Application is null : false
2020-12-25 00:44:00,662 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Registered Applications size is zero : true
2020-12-25 00:44:00,662 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Application version is -1: false
2020-12-25 00:44:00,662 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Getting all instance registry info from the eureka server
2020-12-25 00:44:00,814 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] The response status is 200
2020-12-25 00:44:55,146 INFO org.apache.juli.logging.DirectJDKLog [https-jsse-nio-8084-exec-7] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-25 00:44:55,147 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-7] Initializing Servlet 'dispatcherServlet'
2020-12-25 00:44:55,157 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-7] Completed initialization in 10 ms
2020-12-25 00:49:09,552 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 00:49:17,325 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 00:49:21,782 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 00:49:22,742 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 933ms. Found 3 JPA repository interfaces.
2020-12-25 00:49:23,140 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 00:49:23,617 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 00:49:25,636 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 00:49:25,683 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 00:49:25,685 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 00:49:25,686 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 00:49:27,546 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 00:49:27,547 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 10170 ms
2020-12-25 00:49:28,014 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 00:49:28,016 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 00:49:28,074 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@6d7865d6
2020-12-25 00:49:28,774 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 00:49:29,143 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 00:49:29,430 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 00:49:29,620 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 00:49:30,131 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 00:49:30,781 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 00:49:32,835 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 00:49:32,880 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 00:49:36,420 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 00:49:36,461 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4ae6451d, org.springframework.security.web.context.SecurityContextPersistenceFilter@5fd4e67f, org.springframework.security.web.header.HeaderWriterFilter@2dd08ff1, org.springframework.web.filter.CorsFilter@5f32ab17, org.springframework.security.web.authentication.logout.LogoutFilter@8585cdd, com.ws.sep.seller.security.JwtAuthenticationFilter@70421a08, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3855b27e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66456506, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@54530644, org.springframework.security.web.session.SessionManagementFilter@70cd122, org.springframework.security.web.access.ExceptionTranslationFilter@8f09a02, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6fe9c048]
2020-12-25 00:49:37,273 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table roles (id bigint not null auto_increment, name varchar(60), primary key (id)) engine=InnoDB
2020-12-25 00:49:37,614 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 00:49:37,615 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 00:49:38,326 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 00:49:38,327 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 00:49:38,904 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller (id bigint not null auto_increment, created_at datetime not null, email varchar(255), password varchar(255), pib bigint, primary key (id)) engine=InnoDB
2020-12-25 00:49:40,185 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 00:49:40,186 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 00:49:42,423 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_roles (seller_id bigint not null, role_id bigint not null, primary key (seller_id, role_id)) engine=InnoDB
2020-12-25 00:49:44,128 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 00:49:45,356 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_types (seller_id bigint not null, type_id bigint not null, primary key (seller_id, type_id)) engine=InnoDB
2020-12-25 00:49:46,681 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table types (id bigint not null auto_increment, type varchar(60), primary key (id)) engine=InnoDB
2020-12-25 00:49:48,503 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles drop index UK_nb4h0p6txrmfc0xbrd1kglp9t
2020-12-25 00:49:48,532 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles add constraint UK_nb4h0p6txrmfc0xbrd1kglp9t unique (name)
2020-12-25 00:49:49,632 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKcrgbovyy4gvgsum2yyb3fbfn7
2020-12-25 00:49:49,635 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKcrgbovyy4gvgsum2yyb3fbfn7 unique (email)
2020-12-25 00:49:50,371 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKnsf0yh5x4kb6cwjh7s82rexy8
2020-12-25 00:49:50,374 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKnsf0yh5x4kb6cwjh7s82rexy8 unique (pib)
2020-12-25 00:49:52,466 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types drop index UK4tchu0t1cxvps06xylvdhu0ik
2020-12-25 00:49:52,556 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types add constraint UK4tchu0t1cxvps06xylvdhu0ik unique (type)
2020-12-25 00:49:54,008 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKd9udck8wcatkui48557l7k7hg foreign key (role_id) references roles (id)
2020-12-25 00:49:58,561 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKa25f332e8t8wbwqsgqdm1qnt5 foreign key (seller_id) references seller (id)
2020-12-25 00:50:01,935 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKfhquhyw59vs5ka1uodbmrrb8n foreign key (type_id) references types (id)
2020-12-25 00:50:05,087 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKg46ee9gweuq1jsibld9qu00fl foreign key (seller_id) references seller (id)
2020-12-25 00:50:07,889 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 00:50:07,901 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 00:50:07,933 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 00:50:07,946 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 00:50:07,973 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 00:50:08,195 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 00:50:08,196 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 00:50:08,196 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 00:50:08,196 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 00:50:08,197 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 00:50:08,197 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 00:50:08,197 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 00:50:08,536 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 00:50:08,541 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 00:50:08,545 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 00:50:08,551 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608853808550 with initial instances count: 3
2020-12-25 00:50:08,554 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 00:50:08,554 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608853808554, current=UP, previous=STARTING]
2020-12-25 00:50:08,557 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 00:50:08,559 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 00:50:08,599 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 00:50:08,786 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 00:50:08,787 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 00:50:09,723 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 00:50:10,234 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 00:50:10,253 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 67.853 seconds (JVM running for 72.751)
2020-12-25 00:52:03,124 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 00:52:09,192 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 00:52:11,794 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 00:52:12,288 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 479ms. Found 3 JPA repository interfaces.
2020-12-25 00:52:12,695 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 00:52:14,015 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 00:52:16,018 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 00:52:16,069 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 00:52:16,073 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 00:52:16,074 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 00:52:16,859 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 00:52:16,859 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 7576 ms
2020-12-25 00:52:17,038 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 00:52:17,039 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 00:52:17,084 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@51813065
2020-12-25 00:52:17,362 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 00:52:17,693 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 00:52:17,807 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 00:52:17,895 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 00:52:18,177 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 00:52:18,393 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 00:52:19,857 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 00:52:19,886 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 00:52:23,637 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 00:52:23,651 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 00:52:25,470 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 00:52:25,591 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6493f780, org.springframework.security.web.context.SecurityContextPersistenceFilter@31204303, org.springframework.security.web.header.HeaderWriterFilter@3d05435c, org.springframework.web.filter.CorsFilter@782dc5, org.springframework.security.web.authentication.logout.LogoutFilter@6df31abf, com.ws.sep.seller.security.JwtAuthenticationFilter@335972a5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@81a8898, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@de0c402, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@35f22eef, org.springframework.security.web.session.SessionManagementFilter@511de4dd, org.springframework.security.web.access.ExceptionTranslationFilter@72b1df49, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@9a07409]
2020-12-25 00:52:27,355 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 00:52:27,355 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 00:52:27,858 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 00:52:27,859 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 00:52:30,250 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 00:52:30,252 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 00:52:33,754 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 00:52:34,279 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 00:52:34,316 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 00:52:34,371 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 00:52:34,706 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 00:52:34,707 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 00:52:34,707 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 00:52:34,707 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 00:52:34,708 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 00:52:34,708 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 00:52:34,708 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 00:52:35,392 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 00:52:35,396 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 00:52:35,440 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 00:52:35,494 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608853955491 with initial instances count: 0
2020-12-25 00:52:35,500 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 00:52:35,502 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608853955502, current=UP, previous=STARTING]
2020-12-25 00:52:35,507 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 00:52:35,527 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 00:52:35,767 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 00:52:35,954 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 00:52:35,956 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 00:52:36,290 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 00:52:37,213 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 00:52:37,241 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 43.088 seconds (JVM running for 51.44)
2020-12-25 00:53:05,398 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Disable delta property : false
2020-12-25 00:53:05,398 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Single vip registry refresh property : null
2020-12-25 00:53:05,398 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Force full registry fetch : false
2020-12-25 00:53:05,399 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Application is null : false
2020-12-25 00:53:05,399 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Registered Applications size is zero : true
2020-12-25 00:53:05,399 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Application version is -1: false
2020-12-25 00:53:05,399 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] Getting all instance registry info from the eureka server
2020-12-25 00:53:05,506 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-CacheRefreshExecutor-0] The response status is 200
2020-12-25 00:53:55,158 INFO org.apache.juli.logging.DirectJDKLog [https-jsse-nio-8084-exec-10] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-25 00:53:55,158 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-10] Initializing Servlet 'dispatcherServlet'
2020-12-25 00:53:55,174 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-10] Completed initialization in 16 ms
2020-12-25 00:53:55,315 INFO com.ws.sep.seller.controllers.AuthController [https-jsse-nio-8084-exec-10] INFO - /signin
2020-12-25 00:53:55,634 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-10] select seller0_.id as id1_1_, seller0_.created_at as created_2_1_, seller0_.email as email3_1_, seller0_.password as password4_1_, seller0_.pib as pib5_1_ from seller seller0_ where seller0_.email=?
2020-12-25 00:53:55,679 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-10] select types0_.seller_id as seller_i1_3_0_, types0_.type_id as type_id2_3_0_, paymenttyp1_.id as id1_4_1_, paymenttyp1_.type as type2_4_1_ from seller_types types0_ inner join types paymenttyp1_ on types0_.type_id=paymenttyp1_.id where types0_.seller_id=?
2020-12-25 00:53:55,709 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-10] select roles0_.seller_id as seller_i1_2_0_, roles0_.role_id as role_id2_2_0_, role1_.id as id1_0_1_, role1_.name as name2_0_1_ from seller_roles roles0_ inner join roles role1_ on roles0_.role_id=role1_.id where roles0_.seller_id=?
2020-12-25 00:53:56,133 INFO com.ws.sep.seller.services.AuthService [https-jsse-nio-8084-exec-10] Logged in to the system.
2020-12-25 00:54:19,089 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 00:57:34,715 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 00:58:31,246 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 00:59:14,248 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-9] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 00:59:15,369 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 00:59:16,303 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:01:17,250 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-1] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:01:18,173 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:01:18,223 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:01:18,247 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:01:18,257 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select paymenttyp0_.id as id1_4_, paymenttyp0_.type as type2_4_ from types paymenttyp0_ where paymenttyp0_.type=?
2020-12-25 01:01:18,314 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] insert into types (type) values (?)
2020-12-25 01:01:18,353 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] insert into seller_types (seller_id, type_id) values (?, ?)
2020-12-25 01:01:18,420 INFO com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-6] Successful seller update.
2020-12-25 01:02:34,717 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 01:03:03,967 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-9] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:04:17,774 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-7] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:04:17,972 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-10] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:04:18,022 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:04:18,032 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:04:18,039 ERROR com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-2] Failed to seller update.
2020-12-25 01:07:34,718 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 01:09:32,111 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-1] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:10:54,179 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:12:34,720 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 01:15:15,526 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-1] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:18:19,534 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 01:18:25,725 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 01:18:29,144 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 01:18:30,077 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 921ms. Found 3 JPA repository interfaces.
2020-12-25 01:18:31,010 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 01:18:31,517 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 01:18:33,438 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 01:18:33,464 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 01:18:33,466 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 01:18:33,466 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 01:18:34,249 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 01:18:34,250 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 8423 ms
2020-12-25 01:18:34,714 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 01:18:34,715 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 01:18:34,777 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@5604b85
2020-12-25 01:18:35,644 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 01:18:36,233 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 01:18:36,518 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 01:18:36,653 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 01:18:36,962 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 01:18:37,195 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 01:18:38,491 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 01:18:38,518 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 01:18:40,756 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table roles (id bigint not null auto_increment, name varchar(60), primary key (id)) engine=InnoDB
2020-12-25 01:18:41,729 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller (id bigint not null auto_increment, created_at datetime not null, email varchar(255), password varchar(255), pib bigint, primary key (id)) engine=InnoDB
2020-12-25 01:18:42,334 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_roles (seller_id bigint not null, role_id bigint not null, primary key (seller_id, role_id)) engine=InnoDB
2020-12-25 01:18:42,735 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 01:18:42,767 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@20d65767, org.springframework.security.web.context.SecurityContextPersistenceFilter@7adff6cb, org.springframework.security.web.header.HeaderWriterFilter@20171cdc, org.springframework.web.filter.CorsFilter@250e8712, org.springframework.security.web.authentication.logout.LogoutFilter@1324e70a, com.ws.sep.seller.security.JwtAuthenticationFilter@3c8758d1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@13ebccd, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@72288480, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@becb93a, org.springframework.security.web.session.SessionManagementFilter@77b27b57, org.springframework.security.web.access.ExceptionTranslationFilter@61becbcf, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6978a32a]
2020-12-25 01:18:43,372 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_types (seller_id bigint not null, type_id bigint not null, primary key (seller_id, type_id)) engine=InnoDB
2020-12-25 01:18:44,163 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 01:18:44,164 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 01:18:44,391 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 01:18:44,391 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 01:18:45,670 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 01:18:45,671 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 01:18:46,024 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table types (id bigint not null auto_increment, type varchar(60), primary key (id)) engine=InnoDB
2020-12-25 01:18:46,520 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 01:18:46,892 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles drop index UK_nb4h0p6txrmfc0xbrd1kglp9t
2020-12-25 01:18:47,080 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles add constraint UK_nb4h0p6txrmfc0xbrd1kglp9t unique (name)
2020-12-25 01:18:48,101 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKcrgbovyy4gvgsum2yyb3fbfn7
2020-12-25 01:18:48,167 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKcrgbovyy4gvgsum2yyb3fbfn7 unique (email)
2020-12-25 01:18:49,233 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKnsf0yh5x4kb6cwjh7s82rexy8
2020-12-25 01:18:49,256 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKnsf0yh5x4kb6cwjh7s82rexy8 unique (pib)
2020-12-25 01:18:49,859 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types drop index UK4tchu0t1cxvps06xylvdhu0ik
2020-12-25 01:18:49,863 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types add constraint UK4tchu0t1cxvps06xylvdhu0ik unique (type)
2020-12-25 01:18:50,459 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKd9udck8wcatkui48557l7k7hg foreign key (role_id) references roles (id)
2020-12-25 01:18:53,212 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKa25f332e8t8wbwqsgqdm1qnt5 foreign key (seller_id) references seller (id)
2020-12-25 01:18:55,021 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKfhquhyw59vs5ka1uodbmrrb8n foreign key (type_id) references types (id)
2020-12-25 01:18:59,361 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKg46ee9gweuq1jsibld9qu00fl foreign key (seller_id) references seller (id)
2020-12-25 01:19:02,278 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 01:19:02,287 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 01:19:02,323 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 01:19:02,336 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 01:19:02,369 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 01:19:02,580 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 01:19:02,580 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 01:19:02,581 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 01:19:02,581 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 01:19:02,581 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 01:19:02,581 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 01:19:02,582 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 01:19:02,907 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 01:19:02,911 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 01:19:02,915 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 01:19:02,921 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608855542920 with initial instances count: 3
2020-12-25 01:19:02,924 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 01:19:02,925 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608855542925, current=UP, previous=STARTING]
2020-12-25 01:19:02,928 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 01:19:02,929 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 01:19:02,969 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 01:19:03,156 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 01:19:03,158 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 01:19:03,464 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 01:19:03,937 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 01:19:03,956 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 47.406 seconds (JVM running for 61.734)
2020-12-25 01:19:09,869 INFO org.apache.juli.logging.DirectJDKLog [https-jsse-nio-8084-exec-6] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-25 01:19:09,869 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-6] Initializing Servlet 'dispatcherServlet'
2020-12-25 01:19:09,879 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-6] Completed initialization in 9 ms
2020-12-25 01:19:10,288 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:19:12,701 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:19:12,843 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:19:12,881 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:19:13,024 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select paymenttyp0_.id as id1_4_, paymenttyp0_.type as type2_4_ from types paymenttyp0_ where paymenttyp0_.type=?
2020-12-25 01:19:13,065 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] insert into types (type) values (?)
2020-12-25 01:19:13,095 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] insert into seller_types (seller_id, type_id) values (?, ?)
2020-12-25 01:19:13,133 INFO com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-4] Successful seller update.
2020-12-25 01:19:20,457 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:21:11,339 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-1] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:22:09,172 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:22:46,276 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 01:24:02,585 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 01:25:22,845 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-9] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:02:57,619 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 02:03:01,234 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 02:03:03,515 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 02:03:04,005 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 472ms. Found 3 JPA repository interfaces.
2020-12-25 02:03:04,320 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 02:03:04,867 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 02:03:07,580 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 02:03:07,707 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 02:03:07,709 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 02:03:07,709 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 02:03:12,165 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 02:03:12,166 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 10858 ms
2020-12-25 02:03:12,417 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 02:03:12,418 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 02:03:12,448 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@25421809
2020-12-25 02:03:13,222 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 02:03:13,841 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 02:03:14,073 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 02:03:14,186 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 02:03:14,463 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 02:03:14,677 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 02:03:16,413 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 02:03:16,514 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 02:03:18,440 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table roles (id bigint not null auto_increment, name varchar(60), primary key (id)) engine=InnoDB
2020-12-25 02:03:20,195 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller (id bigint not null auto_increment, created_at datetime not null, email varchar(255), password varchar(255), pib bigint, primary key (id)) engine=InnoDB
2020-12-25 02:03:20,494 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 02:03:20,641 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6bf77ee, org.springframework.security.web.context.SecurityContextPersistenceFilter@177068db, org.springframework.security.web.header.HeaderWriterFilter@1ab1d93d, org.springframework.web.filter.CorsFilter@51c6e775, org.springframework.security.web.authentication.logout.LogoutFilter@76d828ff, com.ws.sep.seller.security.JwtAuthenticationFilter@4d75c604, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6b103db7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5d68be4f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@372841d2, org.springframework.security.web.session.SessionManagementFilter@7f3e9acc, org.springframework.security.web.access.ExceptionTranslationFilter@5d77be8e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@56976b8b]
2020-12-25 02:03:22,338 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 02:03:22,339 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 02:03:22,674 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 02:03:22,675 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 02:03:23,245 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_roles (seller_id bigint not null, role_id bigint not null, primary key (seller_id, role_id)) engine=InnoDB
2020-12-25 02:03:24,288 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 02:03:24,289 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 02:03:27,444 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_types (seller_id bigint not null, type_id bigint not null, primary key (seller_id, type_id)) engine=InnoDB
2020-12-25 02:03:27,535 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 02:03:28,281 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table types (id bigint not null auto_increment, type varchar(60), primary key (id)) engine=InnoDB
2020-12-25 02:03:29,570 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles drop index UK_nb4h0p6txrmfc0xbrd1kglp9t
2020-12-25 02:03:29,691 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles add constraint UK_nb4h0p6txrmfc0xbrd1kglp9t unique (name)
2020-12-25 02:03:30,551 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKcrgbovyy4gvgsum2yyb3fbfn7
2020-12-25 02:03:30,555 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKcrgbovyy4gvgsum2yyb3fbfn7 unique (email)
2020-12-25 02:03:31,366 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKnsf0yh5x4kb6cwjh7s82rexy8
2020-12-25 02:03:31,368 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKnsf0yh5x4kb6cwjh7s82rexy8 unique (pib)
2020-12-25 02:03:32,529 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types drop index UK4tchu0t1cxvps06xylvdhu0ik
2020-12-25 02:03:32,532 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types add constraint UK4tchu0t1cxvps06xylvdhu0ik unique (type)
2020-12-25 02:03:33,120 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKd9udck8wcatkui48557l7k7hg foreign key (role_id) references roles (id)
2020-12-25 02:03:34,931 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKa25f332e8t8wbwqsgqdm1qnt5 foreign key (seller_id) references seller (id)
2020-12-25 02:03:37,909 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKfhquhyw59vs5ka1uodbmrrb8n foreign key (type_id) references types (id)
2020-12-25 02:03:41,330 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKg46ee9gweuq1jsibld9qu00fl foreign key (seller_id) references seller (id)
2020-12-25 02:03:43,389 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 02:03:43,405 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 02:03:43,441 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 02:03:43,459 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 02:03:43,513 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 02:03:43,772 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 02:03:43,772 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 02:03:43,772 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 02:03:43,773 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 02:03:43,773 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 02:03:43,773 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 02:03:43,774 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 02:03:44,178 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 02:03:44,182 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 02:03:44,186 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 02:03:44,194 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608858224193 with initial instances count: 3
2020-12-25 02:03:44,196 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 02:03:44,197 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608858224197, current=UP, previous=STARTING]
2020-12-25 02:03:44,200 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 02:03:44,200 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 02:03:44,252 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 02:03:44,434 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 02:03:44,436 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 02:03:44,758 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 02:03:45,340 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 02:03:45,358 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 57.555 seconds (JVM running for 64.088)
2020-12-25 02:03:49,874 INFO org.apache.juli.logging.DirectJDKLog [https-jsse-nio-8084-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-25 02:03:49,875 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-2] Initializing Servlet 'dispatcherServlet'
2020-12-25 02:03:49,887 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-2] Completed initialization in 12 ms
2020-12-25 02:03:49,996 INFO com.ws.sep.seller.controllers.AuthController [https-jsse-nio-8084-exec-2] INFO - /signin
2020-12-25 02:03:50,302 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_, seller0_.created_at as created_2_1_, seller0_.email as email3_1_, seller0_.password as password4_1_, seller0_.pib as pib5_1_ from seller seller0_ where seller0_.email=?
2020-12-25 02:03:50,332 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select types0_.seller_id as seller_i1_3_0_, types0_.type_id as type_id2_3_0_, paymenttyp1_.id as id1_4_1_, paymenttyp1_.type as type2_4_1_ from seller_types types0_ inner join types paymenttyp1_ on types0_.type_id=paymenttyp1_.id where types0_.seller_id=?
2020-12-25 02:03:50,339 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select roles0_.seller_id as seller_i1_2_0_, roles0_.role_id as role_id2_2_0_, role1_.id as id1_0_1_, role1_.name as name2_0_1_ from seller_roles roles0_ inner join roles role1_ on roles0_.role_id=role1_.id where roles0_.seller_id=?
2020-12-25 02:03:50,770 INFO com.ws.sep.seller.services.AuthService [https-jsse-nio-8084-exec-2] Logged in to the system.
2020-12-25 02:03:58,990 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:04:00,993 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:04:01,020 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:04:01,050 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:04:01,064 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select paymenttyp0_.id as id1_4_, paymenttyp0_.type as type2_4_ from types paymenttyp0_ where paymenttyp0_.type=?
2020-12-25 02:04:01,168 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] insert into types (type) values (?)
2020-12-25 02:04:01,201 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] insert into seller_types (seller_id, type_id) values (?, ?)
2020-12-25 02:04:01,270 INFO com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-5] Successful seller update.
2020-12-25 02:04:08,505 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:06:17,699 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:11:18,753 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 02:11:20,632 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 02:11:24,091 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 02:11:24,636 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 530ms. Found 3 JPA repository interfaces.
2020-12-25 02:11:25,139 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 02:11:25,626 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 02:11:28,331 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 02:11:28,351 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 02:11:28,352 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 02:11:28,353 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 02:11:30,379 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 02:11:30,380 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 9676 ms
2020-12-25 02:11:30,616 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 02:11:30,618 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 02:11:30,660 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@4b7ab7ab
2020-12-25 02:11:31,311 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 02:11:31,810 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 02:11:31,986 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 02:11:32,214 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 02:11:32,602 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 02:11:32,825 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 02:11:34,068 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 02:11:34,096 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 02:11:35,813 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table roles (id bigint not null auto_increment, name varchar(60), primary key (id)) engine=InnoDB
2020-12-25 02:11:36,830 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 02:11:36,914 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5dc7391e, org.springframework.security.web.context.SecurityContextPersistenceFilter@31204303, org.springframework.security.web.header.HeaderWriterFilter@3d05435c, org.springframework.web.filter.CorsFilter@4a9ff419, org.springframework.security.web.authentication.logout.LogoutFilter@6df31abf, com.ws.sep.seller.security.JwtAuthenticationFilter@35cbeb54, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@81a8898, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@de0c402, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ca29311, org.springframework.security.web.session.SessionManagementFilter@511de4dd, org.springframework.security.web.access.ExceptionTranslationFilter@72b1df49, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5065bdac]
2020-12-25 02:11:36,946 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller (id bigint not null auto_increment, created_at datetime not null, email varchar(255), password varchar(255), pib bigint, primary key (id)) engine=InnoDB
2020-12-25 02:11:38,222 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 02:11:38,223 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 02:11:38,331 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_roles (seller_id bigint not null, role_id bigint not null, primary key (seller_id, role_id)) engine=InnoDB
2020-12-25 02:11:38,508 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 02:11:38,509 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 02:11:38,958 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_types (seller_id bigint not null, type_id bigint not null, primary key (seller_id, type_id)) engine=InnoDB
2020-12-25 02:11:39,535 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 02:11:39,538 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 02:11:40,488 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table types (id bigint not null auto_increment, type varchar(60), primary key (id)) engine=InnoDB
2020-12-25 02:11:40,718 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 02:11:41,338 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles drop index UK_nb4h0p6txrmfc0xbrd1kglp9t
2020-12-25 02:11:41,355 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles add constraint UK_nb4h0p6txrmfc0xbrd1kglp9t unique (name)
2020-12-25 02:11:41,749 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKcrgbovyy4gvgsum2yyb3fbfn7
2020-12-25 02:11:41,753 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKcrgbovyy4gvgsum2yyb3fbfn7 unique (email)
2020-12-25 02:11:42,297 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKnsf0yh5x4kb6cwjh7s82rexy8
2020-12-25 02:11:42,300 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKnsf0yh5x4kb6cwjh7s82rexy8 unique (pib)
2020-12-25 02:11:42,973 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types drop index UK4tchu0t1cxvps06xylvdhu0ik
2020-12-25 02:11:42,975 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types add constraint UK4tchu0t1cxvps06xylvdhu0ik unique (type)
2020-12-25 02:11:43,748 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKd9udck8wcatkui48557l7k7hg foreign key (role_id) references roles (id)
2020-12-25 02:11:48,466 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKa25f332e8t8wbwqsgqdm1qnt5 foreign key (seller_id) references seller (id)
2020-12-25 02:11:51,298 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKfhquhyw59vs5ka1uodbmrrb8n foreign key (type_id) references types (id)
2020-12-25 02:11:54,448 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKg46ee9gweuq1jsibld9qu00fl foreign key (seller_id) references seller (id)
2020-12-25 02:11:56,256 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 02:11:56,266 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 02:11:56,297 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 02:11:56,309 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 02:11:56,340 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 02:11:56,560 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 02:11:56,560 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 02:11:56,561 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 02:11:56,561 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 02:11:56,561 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 02:11:56,561 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 02:11:56,562 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 02:11:56,902 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 02:11:56,906 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 02:11:56,910 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 02:11:56,916 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608858716915 with initial instances count: 1
2020-12-25 02:11:56,920 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 02:11:56,921 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608858716921, current=UP, previous=STARTING]
2020-12-25 02:11:56,924 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 02:11:56,925 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 02:11:56,970 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 02:11:57,166 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 02:11:57,167 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 02:11:57,501 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 02:11:58,033 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 02:11:58,055 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 48.287 seconds (JVM running for 61.442)
2020-12-25 02:12:45,447 INFO org.apache.juli.logging.DirectJDKLog [https-jsse-nio-8084-exec-6] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-25 02:12:45,447 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-6] Initializing Servlet 'dispatcherServlet'
2020-12-25 02:12:45,465 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-6] Completed initialization in 17 ms
2020-12-25 02:12:45,592 INFO com.ws.sep.seller.controllers.AuthController [https-jsse-nio-8084-exec-6] INFO - /signin
2020-12-25 02:12:45,916 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_, seller0_.created_at as created_2_1_, seller0_.email as email3_1_, seller0_.password as password4_1_, seller0_.pib as pib5_1_ from seller seller0_ where seller0_.email=?
2020-12-25 02:12:45,953 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select types0_.seller_id as seller_i1_3_0_, types0_.type_id as type_id2_3_0_, paymenttyp1_.id as id1_4_1_, paymenttyp1_.type as type2_4_1_ from seller_types types0_ inner join types paymenttyp1_ on types0_.type_id=paymenttyp1_.id where types0_.seller_id=?
2020-12-25 02:12:45,963 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select roles0_.seller_id as seller_i1_2_0_, roles0_.role_id as role_id2_2_0_, role1_.id as id1_0_1_, role1_.name as name2_0_1_ from seller_roles roles0_ inner join roles role1_ on roles0_.role_id=role1_.id where roles0_.seller_id=?
2020-12-25 02:12:46,440 INFO com.ws.sep.seller.services.AuthService [https-jsse-nio-8084-exec-6] Logged in to the system.
2020-12-25 02:12:50,704 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:12:52,583 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:12:52,609 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:12:52,630 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:12:52,641 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select paymenttyp0_.id as id1_4_, paymenttyp0_.type as type2_4_ from types paymenttyp0_ where paymenttyp0_.type=?
2020-12-25 02:12:52,685 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] insert into types (type) values (?)
2020-12-25 02:12:52,724 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] insert into seller_types (seller_id, type_id) values (?, ?)
2020-12-25 02:12:52,814 INFO com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-5] Successful seller update.
2020-12-25 02:12:56,592 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:13:55,936 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-9] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:15:07,915 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-5] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:16:56,566 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 02:21:56,568 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 02:26:56,569 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 02:28:37,357 INFO com.ws.sep.seller.controllers.AuthController [https-jsse-nio-8084-exec-2] INFO - /signin
2020-12-25 02:28:37,359 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select seller0_.id as id1_1_, seller0_.created_at as created_2_1_, seller0_.email as email3_1_, seller0_.password as password4_1_, seller0_.pib as pib5_1_ from seller seller0_ where seller0_.email=?
2020-12-25 02:28:37,389 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select types0_.seller_id as seller_i1_3_0_, types0_.type_id as type_id2_3_0_, paymenttyp1_.id as id1_4_1_, paymenttyp1_.type as type2_4_1_ from seller_types types0_ inner join types paymenttyp1_ on types0_.type_id=paymenttyp1_.id where types0_.seller_id=?
2020-12-25 02:28:37,415 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-2] select roles0_.seller_id as seller_i1_2_0_, roles0_.role_id as role_id2_2_0_, role1_.id as id1_0_1_, role1_.name as name2_0_1_ from seller_roles roles0_ inner join roles role1_ on roles0_.role_id=role1_.id where roles0_.seller_id=?
2020-12-25 02:28:37,545 INFO com.ws.sep.seller.services.AuthService [https-jsse-nio-8084-exec-2] Logged in to the system.
2020-12-25 02:28:39,866 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:29:00,995 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:29:01,372 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-7] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:29:01,397 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-9] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:29:01,406 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-9] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:29:01,410 ERROR com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-9] Failed to seller update.
2020-12-25 02:29:57,280 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.1.6.Final
2020-12-25 02:30:07,291 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2020-12-25 02:30:09,922 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-12-25 02:30:10,339 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 401ms. Found 3 JPA repository interfaces.
2020-12-25 02:30:11,063 WARN org.springframework.boot.actuate.endpoint.EndpointId [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-12-25 02:30:11,578 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=1fcd5db8-b656-3780-b378-6702082dec77
2020-12-25 02:30:15,198 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8084 (https)
2020-12-25 02:30:15,217 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 02:30:15,218 INFO org.apache.juli.logging.DirectJDKLog [main] Starting service [Tomcat]
2020-12-25 02:30:15,219 INFO org.apache.juli.logging.DirectJDKLog [main] Starting Servlet engine: [Apache Tomcat/9.0.39]
2020-12-25 02:30:16,960 INFO org.apache.juli.logging.DirectJDKLog [main] Initializing Spring embedded WebApplicationContext
2020-12-25 02:30:16,961 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 9607 ms
2020-12-25 02:30:17,765 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 02:30:17,766 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 02:30:17,793 INFO com.netflix.config.DynamicPropertyFactory [main] DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@2ac05a33
2020-12-25 02:30:18,339 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-25 02:30:18,639 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [main] Initializing ExecutorService 'applicationTaskExecutor'
2020-12-25 02:30:18,877 INFO org.hibernate.jpa.internal.util.LogHelper [task-1] HHH000204: Processing PersistenceUnitInfo [name: default]
2020-12-25 02:30:19,005 INFO org.hibernate.Version [task-1] HHH000412: Hibernate ORM core version 5.4.23.Final
2020-12-25 02:30:20,424 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [task-1] HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2020-12-25 02:30:21,026 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Starting...
2020-12-25 02:30:22,516 INFO com.zaxxer.hikari.HikariDataSource [task-1] HikariPool-1 - Start completed.
2020-12-25 02:30:22,546 INFO org.hibernate.dialect.Dialect [task-1] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
2020-12-25 02:30:24,246 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table roles (id bigint not null auto_increment, name varchar(60), primary key (id)) engine=InnoDB
2020-12-25 02:30:25,721 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller (id bigint not null auto_increment, created_at datetime not null, email varchar(255), password varchar(255), pib bigint, primary key (id)) engine=InnoDB
2020-12-25 02:30:26,075 INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver [main] Exposing 2 endpoint(s) beneath base path '/actuator'
2020-12-25 02:30:26,124 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@59e4a044, org.springframework.security.web.context.SecurityContextPersistenceFilter@6aa9a93b, org.springframework.security.web.header.HeaderWriterFilter@96075c0, org.springframework.web.filter.CorsFilter@4be3de36, org.springframework.security.web.authentication.logout.LogoutFilter@6f67ece5, com.ws.sep.seller.security.JwtAuthenticationFilter@57f725b8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@14b9df65, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2573b149, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5c03eb4e, org.springframework.security.web.session.SessionManagementFilter@18209303, org.springframework.security.web.access.ExceptionTranslationFilter@69419d59, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@452e2210]
2020-12-25 02:30:26,744 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_roles (seller_id bigint not null, role_id bigint not null, primary key (seller_id, role_id)) engine=InnoDB
2020-12-25 02:30:27,308 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON encoding codec LegacyJacksonJson
2020-12-25 02:30:27,309 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using JSON decoding codec LegacyJacksonJson
2020-12-25 02:30:27,552 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML encoding codec XStreamXml
2020-12-25 02:30:27,553 INFO com.netflix.discovery.provider.DiscoveryJerseyProvider [main] Using XML decoding codec XStreamXml
2020-12-25 02:30:27,910 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table seller_types (seller_id bigint not null, type_id bigint not null, primary key (seller_id, type_id)) engine=InnoDB
2020-12-25 02:30:28,318 WARN com.netflix.config.sources.URLConfigurationSource [main] No URLs will be polled as dynamic configuration sources.
2020-12-25 02:30:28,320 INFO com.netflix.config.sources.URLConfigurationSource [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-12-25 02:30:28,901 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] create table types (id bigint not null auto_increment, type varchar(60), primary key (id)) engine=InnoDB
2020-12-25 02:30:29,786 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles drop index UK_nb4h0p6txrmfc0xbrd1kglp9t
2020-12-25 02:30:29,797 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table roles add constraint UK_nb4h0p6txrmfc0xbrd1kglp9t unique (name)
2020-12-25 02:30:29,973 WARN org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [main] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-12-25 02:30:30,515 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKcrgbovyy4gvgsum2yyb3fbfn7
2020-12-25 02:30:30,519 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKcrgbovyy4gvgsum2yyb3fbfn7 unique (email)
2020-12-25 02:30:31,119 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller drop index UKnsf0yh5x4kb6cwjh7s82rexy8
2020-12-25 02:30:31,121 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller add constraint UKnsf0yh5x4kb6cwjh7s82rexy8 unique (pib)
2020-12-25 02:30:31,587 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types drop index UK4tchu0t1cxvps06xylvdhu0ik
2020-12-25 02:30:31,589 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table types add constraint UK4tchu0t1cxvps06xylvdhu0ik unique (type)
2020-12-25 02:30:32,136 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKd9udck8wcatkui48557l7k7hg foreign key (role_id) references roles (id)
2020-12-25 02:30:38,314 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_roles add constraint FKa25f332e8t8wbwqsgqdm1qnt5 foreign key (seller_id) references seller (id)
2020-12-25 02:30:40,280 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKfhquhyw59vs5ka1uodbmrrb8n foreign key (type_id) references types (id)
2020-12-25 02:30:42,179 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [task-1] alter table seller_types add constraint FKg46ee9gweuq1jsibld9qu00fl foreign key (seller_id) references seller (id)
2020-12-25 02:30:43,960 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [task-1] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-12-25 02:30:43,972 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [task-1] Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-25 02:30:44,002 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2020-12-25 02:30:44,014 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2020-12-25 02:30:44,040 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2020-12-25 02:30:44,265 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2020-12-25 02:30:44,265 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2020-12-25 02:30:44,266 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2020-12-25 02:30:44,266 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2020-12-25 02:30:44,266 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2020-12-25 02:30:44,266 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2020-12-25 02:30:44,266 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2020-12-25 02:30:44,612 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2020-12-25 02:30:44,616 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2020-12-25 02:30:44,621 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-12-25 02:30:44,626 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1608859844625 with initial instances count: 3
2020-12-25 02:30:44,630 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application SELLER with eureka with status UP
2020-12-25 02:30:44,631 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1608859844631, current=UP, previous=STARTING]
2020-12-25 02:30:44,634 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084: registering service...
2020-12-25 02:30:44,634 INFO org.apache.juli.logging.DirectJDKLog [main] Starting ProtocolHandler ["https-jsse-nio-8084"]
2020-12-25 02:30:44,680 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_SELLER/DESKTOP-UVNRQ0Q:seller:8084 - registration status: 204
2020-12-25 02:30:44,851 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8084 (https) with context path ''
2020-12-25 02:30:44,852 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration [main] Updating port to 8084
2020-12-25 02:30:45,165 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Triggering deferred initialization of Spring Data repositoriesâ€¦
2020-12-25 02:30:45,671 INFO org.springframework.data.repository.config.DeferredRepositoryInitializationListener [main] Spring Data repositories initialized!
2020-12-25 02:30:45,693 INFO org.springframework.boot.StartupInfoLogger [main] Started SellerApplication in 56.513 seconds (JVM running for 62.551)
2020-12-25 02:30:53,126 INFO org.apache.juli.logging.DirectJDKLog [https-jsse-nio-8084-exec-8] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-12-25 02:30:53,127 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-8] Initializing Servlet 'dispatcherServlet'
2020-12-25 02:30:53,140 INFO org.springframework.web.servlet.FrameworkServlet [https-jsse-nio-8084-exec-8] Completed initialization in 13 ms
2020-12-25 02:30:53,264 INFO com.ws.sep.seller.controllers.AuthController [https-jsse-nio-8084-exec-8] INFO - /signin
2020-12-25 02:30:53,565 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select seller0_.id as id1_1_, seller0_.created_at as created_2_1_, seller0_.email as email3_1_, seller0_.password as password4_1_, seller0_.pib as pib5_1_ from seller seller0_ where seller0_.email=?
2020-12-25 02:30:53,595 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select types0_.seller_id as seller_i1_3_0_, types0_.type_id as type_id2_3_0_, paymenttyp1_.id as id1_4_1_, paymenttyp1_.type as type2_4_1_ from seller_types types0_ inner join types paymenttyp1_ on types0_.type_id=paymenttyp1_.id where types0_.seller_id=?
2020-12-25 02:30:53,603 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select roles0_.seller_id as seller_i1_2_0_, roles0_.role_id as role_id2_2_0_, role1_.id as id1_0_1_, role1_.name as name2_0_1_ from seller_roles roles0_ inner join roles role1_ on roles0_.role_id=role1_.id where roles0_.seller_id=?
2020-12-25 02:30:54,097 INFO com.ws.sep.seller.services.AuthService [https-jsse-nio-8084-exec-8] Logged in to the system.
2020-12-25 02:30:57,962 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:31:00,060 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-3] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:31:00,086 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:31:00,112 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:31:00,122 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select paymenttyp0_.id as id1_4_, paymenttyp0_.type as type2_4_ from types paymenttyp0_ where paymenttyp0_.type=?
2020-12-25 02:31:00,180 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] insert into types (type) values (?)
2020-12-25 02:31:00,223 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] insert into seller_types (seller_id, type_id) values (?, ?)
2020-12-25 02:31:00,260 INFO com.ws.sep.seller.controllers.PaymentController [https-jsse-nio-8084-exec-6] Successful seller update.
2020-12-25 02:31:03,438 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-8] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:33:56,110 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:35:34,177 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-7] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:35:44,269 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 02:35:44,977 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-1] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:36:39,953 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-4] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:37:45,202 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-6] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:40:44,276 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
2020-12-25 02:41:06,831 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [https-jsse-nio-8084-exec-1] select seller0_.id as id1_1_0_, seller0_.created_at as created_2_1_0_, seller0_.email as email3_1_0_, seller0_.password as password4_1_0_, seller0_.pib as pib5_1_0_, roles1_.seller_id as seller_i1_2_1_, role2_.id as role_id2_2_1_, role2_.id as id1_0_2_, role2_.name as name2_0_2_, types3_.seller_id as seller_i1_3_3_, paymenttyp4_.id as type_id2_3_3_, paymenttyp4_.id as id1_4_4_, paymenttyp4_.type as type2_4_4_ from seller seller0_ left outer join seller_roles roles1_ on seller0_.id=roles1_.seller_id left outer join roles role2_ on roles1_.role_id=role2_.id left outer join seller_types types3_ on seller0_.id=types3_.seller_id left outer join types paymenttyp4_ on types3_.type_id=paymenttyp4_.id where seller0_.id=?
2020-12-25 02:45:44,277 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [AsyncResolver-bootstrap-executor-0] Resolving eureka endpoints via configuration
